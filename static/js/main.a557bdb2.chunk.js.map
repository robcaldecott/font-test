{"version":3,"sources":["ThemeProvider.js","App.js","index.js"],"names":["Context","createContext","brand","slate","white","midBlue","gradientGreen","gradientBlue","carbon","stone","lightBlue","darkBlue","green","purple","yellow","orange","red","primary","noop","ThemeProvider","children","initialMode","onChangeMode","overrides","cssBaseline","useState","mode","setMode","useEffect","value","useMemo","toggle","type","theme","createMuiTheme","typography","fontFamily","palette","main","contrastText","undefined","secondary","error","info","warning","success","background","default","MuiPaper","rounded","borderRadius","MuiDialog","paper","MuiListItemIcon","root","minWidth","color","MuiLink","props","MuiButton","disableElevation","MuiContainer","disableGutters","maxWidth","MuiTypography","MuiTextField","variant","fullWidth","size","MuiList","disablePadding","MuiUseMediaQuery","noSsr","MuiRadio","MuiCheckbox","MuiSwitch","Provider","CssBaseline","App","show","setShow","AppBar","Toolbar","Typography","Container","style","padding","Grid","container","spacing","item","xs","Card","CardHeader","title","subheader","CardActions","Button","onClick","CardContent","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a557bdb2.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useMemo,\n  useEffect,\n  useState,\n} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  createMuiTheme,\n  ThemeProvider as MUIThemeProvider,\n} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"@fontsource/ibm-plex-sans/300.css\";\nimport \"@fontsource/ibm-plex-sans/400.css\";\nimport \"@fontsource/ibm-plex-sans/500.css\";\nimport \"@fontsource/ibm-plex-sans/700.css\";\n\nconst Context = createContext(\"light\");\n\n// Keyloop branding colours\n// https://confluence.cdk.com/display/DSI/Keyloop+Colours\nconst brand = {\n  // Logo\n  slate: \"#3C576B\",\n  white: \"#FFFFFF\",\n  // Gradient\n  midBlue: \"#76AFDC\",\n  gradientGreen: \"#98EBD3\",\n  gradientBlue: \"#87E6FF\",\n  // Neutrals\n  carbon: \"#20292E\",\n  stone: \"#E6E7E8\",\n  // Brights\n  lightBlue: \"#00DDFF\",\n  darkBlue: \"#0030D1\",\n  green: \"#00F6D2\",\n  purple: \"#6D40F6\",\n  yellow: \"#FFF05A\",\n  orange: \"#FF7823\",\n  red: \"#F54B64\",\n};\n\nconst primary = brand.midBlue;\nconst noop = () => {};\n\n/**\n * Branded theme provider for Material UI apps.\n *\n * Wrap your app in this provider to ensure a consistent\n * theme and use of the brand font.\n */\nconst ThemeProvider = ({\n  children,\n  initialMode = \"light\",\n  onChangeMode = noop,\n  overrides,\n  cssBaseline = true,\n}) => {\n  const [mode, setMode] = useState(initialMode);\n\n  useEffect(() => {\n    onChangeMode(mode);\n  }, [mode, onChangeMode]);\n\n  const value = useMemo(\n    () => ({\n      mode,\n      setMode,\n      toggle: () => setMode((type) => (type === \"light\" ? \"dark\" : \"light\")),\n    }),\n    [mode, setMode]\n  );\n\n  const theme = useMemo(\n    () =>\n      createMuiTheme(\n        {\n          typography: {\n            fontFamily: ['\"IBM Plex Sans\"', \"Roboto\", \"Arial\", \"sans-serif\"],\n          },\n          palette: {\n            type: mode,\n            primary: {\n              main: primary,\n              contrastText: mode === \"light\" ? \"#fff\" : undefined,\n            },\n            secondary: {\n              main: mode === \"light\" ? brand.purple : brand.gradientGreen,\n            },\n            error: {\n              main: \"#EB0000\",\n            },\n            info: {\n              main: \"#074FAF\",\n            },\n            warning: {\n              main: \"#FA9C19\",\n            },\n            success: {\n              main: \"#09AD00\",\n            },\n            background: {\n              default: mode === \"light\" ? \"#eee\" : \"#303030\",\n            },\n            brand,\n          },\n          overrides: {\n            MuiPaper: {\n              rounded: {\n                borderRadius: \"0.5rem\",\n              },\n            },\n            MuiDialog: {\n              paper: {\n                borderRadius: \"0.5rem\",\n              },\n            },\n            MuiListItemIcon: {\n              root: {\n                minWidth: \"40px\",\n                color:\n                  mode === \"dark\"\n                    ? \"rgba(255, 255, 255, 0.87)\"\n                    : \"rgba(0, 0, 0, 0.54)\",\n              },\n            },\n            MuiLink: {\n              root: {\n                color: mode === \"light\" ? brand.darkBlue : brand.gradientBlue,\n              },\n            },\n          },\n          props: {\n            MuiButton: {\n              disableElevation: true,\n            },\n            MuiContainer: {\n              disableGutters: true,\n              maxWidth: \"lg\",\n            },\n            MuiTypography: {\n              color: \"textPrimary\",\n            },\n            MuiTextField: {\n              variant: \"outlined\",\n              fullWidth: true,\n              size: \"medium\",\n            },\n            MuiList: {\n              disablePadding: false,\n            },\n            MuiUseMediaQuery: {\n              noSsr: true,\n            },\n            MuiRadio: {\n              color: \"primary\",\n            },\n            MuiCheckbox: {\n              color: \"primary\",\n            },\n            MuiSwitch: {\n              color: \"primary\",\n            },\n          },\n        },\n        overrides\n      ),\n    [mode, overrides]\n  );\n\n  return (\n    <Context.Provider value={value}>\n      <MUIThemeProvider theme={theme}>\n        {cssBaseline && <CssBaseline />}\n        {children}\n      </MUIThemeProvider>\n    </Context.Provider>\n  );\n};\n\nThemeProvider.propTypes = {\n  /** Your application component. */\n  children: PropTypes.node.isRequired,\n  /** The initial theme mode. */\n  initialMode: PropTypes.oneOf([\"light\", \"dark\"]),\n  /** Called when the theme mode is changed. Passed the new mode (\"light\" or \"dark\") */\n  onChangeMode: PropTypes.func,\n  /**\n   * Theme overrides.\n   *\n   * Do not use a literal object as this prop else your app will suffer from unnecessary\n   * rerenders. Instead memoise your object or declare it outside of your component.\n   */\n  overrides: PropTypes.object,\n  /**\n   * Render the `<CssBaseline />` component.\n   *\n   * If you are using Material UI in conjunction with another component library then\n   * rendering the `<CssBaseline />` component may cause issues with layout.\n   */\n  cssBaseline: PropTypes.bool,\n};\n\n/**\n * Hook used to access the theme mode.\n *\n * Returns an object containing `mode` and `setMode` properties.\n */\nconst useThemeMode = () => useContext(Context);\n\nexport { ThemeProvider, useThemeMode };\n","import { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Container,\n  Card,\n  CardActions,\n  CardHeader,\n  Button,\n  Grid,\n  CardContent,\n} from \"@material-ui/core\";\n\nfunction App() {\n  const [show, setShow] = useState(false);\n\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Test app\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n\n      <Container style={{ padding: \"2rem 1rem\" }}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Card>\n              <CardHeader title=\"Test app\" subheader=\"Fonts\" />\n              <CardActions>\n                <Button onClick={() => setShow((show) => !show)}>\n                  Show second card\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n\n          {show && (\n            <Grid item xs={12}>\n              <Card>\n                <CardContent>\n                  {[\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"].map((variant) => (\n                    <Typography key={variant} variant={variant}>\n                      {variant}\n                    </Typography>\n                  ))}\n                </CardContent>\n              </Card>\n            </Grid>\n          )}\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"./ThemeProvider\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}